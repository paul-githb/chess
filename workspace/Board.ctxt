#BlueJ class context
comment0.target=Board
comment0.text=\ Represents\ a\ Chess\ board\ containing\ all\ of\ the\ pieces.\r\n\ @author\ Eric\ Wu\r\n\ @author\ Yatin\ Ravi\r\n\ @author\ Paul\ Shin\r\n\ @version\ 1.0\r\n
comment1.params=p0\ p1
comment1.target=Board(Player,\ Player)
comment1.text=\r\n\ Contructor\ for\ the\ Board\ class.\ It\ creates\ a\ board\ which\ is\ represented\ in\ the\r\n\ form\ of\ a\ double\ array\ which\ is\ 8\ units\ up\ and\ and\ 8\ units\ down.\r\n\ @param\ p0\ The\ player\ on\ top.\r\n\ @param\ p1\ The\ player\ on\ bottom.\r\n
comment10.params=piece\ outRow\ outCol
comment10.target=boolean\ checkExists(Piece,\ int,\ int)
comment10.text=\ \r\n\ Determines\ whether\ or\ not\ moving\ the\ specified\ Piece\ to\ a\ certain\r\n\ Tile\ will\ result\ in\ the\ player's\ King\ to\ be\ in\ check.\r\n\ @param\ \tpiece\ The\ piece\ to\ check\ the\ movement\ of.\r\n\ @param\ \toutRow\ The\ row\ to\ which\ the\ piece\ is\ to\ be\ moved\r\n\ @param\ \toutCol\ The\ column\ to\ which\ the\ piece\ is\ to\ be\ moved\r\n\ @return\ \tWhether\ or\ not\ the\ movement\ of\ the\ Piece\ will\ result\ in\ a\ check.\r\n
comment11.params=
comment11.target=boolean\ isCheckmate()
comment11.text=\r\n\ Determines\ whether\ or\ not\ the\ current\ player\ is\ under\ a\ checkmate.\r\n\ A\ checkmate\ occurs\ if\ the\ player\ cannot\ move\ out\ of\ a\ check.\r\n\ @return\ \tWhether\ or\ not\ the\ current\ Player\ is\ under\ checkmate.\r\n
comment12.params=side
comment12.target=boolean\ castleIsValid(java.lang.String)
comment12.text=\r\n\ Determines\ whether\ or\ not\ the\ current\ Player\ can\ castle\ on\ the\ specified\ side.\r\n\ The\ left\ side\ deals\ with\ the\ Player's\ King\ and\ the\ left\ Rook,\ whereas\ the\ right\r\n\ side\ deals\ with\ the\ Player's\ King\ and\ the\ right\ Rook.\r\n\ @param\ side\ The\ corner\ on\ which\ to\ check\ the\ validity\ of\ a\ castle.\r\n\ @return\ Whether\ or\ not\ the\ current\ Player\ can\ perform\ a\ castle\ on\ the\ specified\ side.\r\n
comment13.params=piece
comment13.target=boolean\ promotionIsValid(Piece)
comment13.text=\r\n\ Determines\ whether\ or\ not\ a\ certain\ piece\ is\ deserving\ of\ a\ promotion.\r\n\ A\ promotion\ occurs\ when\ a\ Player's\ pawn\ makes\ it\ over\ to\ the\ other\ end\r\n\ of\ the\ board,\ and\ must\ immediately\ be\ replaced\ by\ a\ Queen,\ Rook,\ Knight,\r\n\ or\ Bishop.\r\n\ @param\ piece\ The\ piece\ to\ check\ for\ validity\ of\ a\ promotion.\r\n\ @return\ Whether\ or\ not\ the\ piece\ should\ be\ promoted.\r\n
comment14.params=piece
comment14.target=void\ promote(Piece)
comment14.text=\r\n\ Prompts\ the\ Player\ with\ a\ valid\ promotion\ to\ pick\ which\ Piece\ to\ promote\ his\ or\ her\ Pawn\ to.\r\n\ @param\ piece\ The\ piece\ to\ promote\ to\ a\ higher\ rank.\r\n
comment15.params=side\ playerID
comment15.target=void\ performCastle(java.lang.String,\ int)
comment15.text=\r\n\ Performs\ a\ castle\ move\ based\ on\ the\ corner\ specified\ by\ the\ parameters.\r\n\ If\ the\ side\ specified\ is\ left,\ then\ the\ castle\ is\ performed\ on\ a\ left\r\n\ corner;\ otherwise,\ it\ is\ performed\ on\ a\ right\ corner.\ If\ the\ playerID\r\n\ specified\ is\ 0,\ then\ the\ castle\ is\ performed\ on\ a\ top\ corner;\ otherwise,\r\n\ it\ is\ performed\ on\ a\ bottom\ corner.\r\n\ @param\ side\ The\ side\ of\ the\ pieces\ to\ castle,\ left\ or\ right.\r\n\ @param\ playerID\ The\ Player\ for\ which\ to\ perform\ the\ castle.\r\n
comment16.params=row\ col
comment16.target=Piece\ getPiece(int,\ int)
comment16.text=\r\n\ This\ method\ returns\ the\ piece\ in\ the\ position\ that\ was\ prompted,\ it\ returns\ a\ \r\n\ null\ value\ if\ the\ value\ that\ was\ inputed\ is\ invalid\ (if\ the\ value\ is\ greater\ than\ 7\ or\ lesser\r\n\ than\ 0\ for\ either\ the\ row\ or\ the\ column).\ \r\n\ @param\ row\ The\ row\ of\ the\ piece\ to\ retrieve.\r\n\ @param\ col\ The\ column\ of\ the\ piece\ to\ retrieve.\r\n\ @return\ The\ Piece\ at\ the\ specified\ row\ and\ column.\r\n
comment17.params=irow\ icol\ frow\ fcol
comment17.target=Piece\ movePiece(int,\ int,\ int,\ int)
comment17.text=\r\n\ This\ method\ moves\ a\ piece\ from\ one\ row\ to\ another.\r\n\ The\ first\ pair\ of\ parameters\ specifies\ the\ position\ of\ the\ piece\r\n\ to\ move,\ and\ the\ second\ pair\ specifies\ the\ position\ to\ move\ it\ to.\r\n\ The\ method\ returns\ the\ piece\ that\ was\ replaced,\ if\ applicable.\r\n\ @param\ irow\ The\ row\ of\ the\ piece\ to\ move.\r\n\ @param\ icol\ The\ column\ of\ the\ piece\ to\ move.\r\n\ @param\ frow\ The\ row\ of\ the\ Tile\ to\ move\ the\ piece\ to.\r\n\ @param\ fcol\ The\ column\ of\ the\ Tile\ to\ move\ the\ piece\ to.\r\n\ @return\:\ The\ piece\ that\ was\ removed\ from\ the\ second\ Tile.\r\n
comment18.params=piece\ row\ col
comment18.target=Piece\ setPiece(Piece,\ int,\ int)
comment18.text=\ \r\n\ Allows\ a\ piece\ outside\ of\ the\ Chess\ board\ to\ take\ on\ a\ position\r\n\ on\ the\ board,\ then\ returns\ the\ piece\ previously\ in\ that\ position.\r\n\ @param\ \tpiece\ The\ piece\ to\ add\ to\ the\ board.\r\n\ @param\ \trow\ The\ row\ of\ the\ position\ in\ which\ to\ insert\ the\ Piece.\r\n\ @param\ \tcol\ The\ column\ of\ the\ position\ in\ which\ to\ insert\ the\ Piece.\r\n\ @return\ \tThe\ Piece\ that\ was\ removed\ from\ the\ specified\ Tile.\r\n
comment19.params=tile
comment19.target=void\ handleRequest(Tile)
comment19.text=\r\n\ Handles\ the\ changes\ in\ settings\ of\ the\ board\ based\ on\ which\ Tile\ was\ selected.\r\n\ Takes\ in\ a\ Tile\ that\ was\ clicked\ and\ makes\ appropriate\ changes\ to\ the\ board\r\n\ and\ player\ settings\ based\ on\ the\ current\ state\ of\ the\ board.\r\n\ @param\ tile\ The\ tile\ that\ was\ selected.\r\n
comment2.params=
comment2.target=King\ getWhiteKing()
comment2.text=\ \r\n\ Returns\ the\ King\ belonging\ to\ the\ bottom\ player.\r\n\ @return\ The\ white\ King.\r\n
comment20.params=
comment20.target=java.awt.Dimension\ getPreferredSize()
comment21.params=g
comment21.target=void\ paintComponent(java.awt.Graphics)
comment3.params=
comment3.target=King\ getBlackKing()
comment3.text=\ \r\n\ Returns\ the\ King\ belonging\ to\ the\ top\ player.\r\n\ @return\ \tThe\ black\ King.\r\n
comment4.params=
comment4.target=void\ reset()
comment4.text=\r\n\ A\ void\ type\ method\ that\ clears\ the\ board\ when\ called,\ then\ sets\ up\ the\ \r\n\ rows\ of\ pawns,\ the\ rooks,\ the\ knights,\ the\ bishop\ and\ then\ the\ king\ and\ the\ queen,\ in\ the\ respective\r\n\ positions.\r\n
comment5.params=
comment5.target=Piece\ getSelectedPiece()
comment5.text=\ \r\n\ Returns\ the\ Piece\ that\ is\ currently\ selected.\r\n\ @return\ The\ currently\ selected\ Piece.\r\n
comment6.params=p
comment6.target=void\ setSelectedPiece(Piece)
comment6.text=\ \r\n\ Sets\ the\ currently\ selected\ Piece\ to\ whichever\ Piece\ was\ sent\ in.\r\n\ @param\ p\ The\ Piece\ to\ select.\r\n
comment7.params=
comment7.target=void\ print()
comment7.text=\r\n\ A\ void\ type\ method\ that\ prints\ the\ board\ on\ the\ console.\ It\ firsts\ prints\ the\ \r\n\ top\ border\ of\ the\ chess\ board.\ The\ method\ then\ Iterates\ through\ each\ row\ and\ prints\ the\ pieces\r\n\ respectively.\ It\ then\ prints\ a\ line\ barrier\ between\ each\ of\ the\ previously\ printed\ rows.\r\n
comment8.params=piece\ outRow\ outCol\ piece2\ outRow2\ outCol2
comment8.target=boolean\ checkExists(Piece,\ int,\ int,\ Piece,\ int,\ int)
comment8.text=\ \r\n\ Determines\ whether\ or\ not\ moving\ the\ specified\ Piece(s)\ to\ a\ certain\r\n\ Tile(s)\ will\ result\ in\ the\ player's\ King\ to\ be\ in\ check.\r\n\ @param\ \tpiece\ The\ piece\ to\ check\ movement\ of.\r\n\ @param\ \toutRow\ The\ row\ to\ which\ the\ piece\ is\ to\ be\ moved.\r\n\ @param\ \toutCol\ The\ column\ to\ which\ the\ piece\ is\ to\ be\ moved.\r\n\ @param\tpiece2\ The\ second\ piece\ to\ be\ moved.\r\n\ @param\ \toutRow2\ The\ row\ to\ which\ the\ second\ piece\ is\ to\ be\ moved.\r\n\ @param\ \toutCol2\ The\ column\ to\ which\ the\ second\ piece\ is\ to\ be\ moved.\r\n\ @return\ \tWhether\ or\ not\ the\ movement\ of\ pieces\ will\ result\ in\ a\ check.\r\n
comment9.params=p1\ r1\ c1\ b1\ p2\ r2\ c2\ b2
comment9.target=void\ resetLocations(Piece,\ int,\ int,\ boolean,\ Piece,\ int,\ int,\ boolean)
comment9.text=\ \r\n\ Moves\ the\ pieces\ altered\ by\ the\ checkExists()\ method\ back\ to\ their\ original\ locations\ on\ the\ board.\r\n\ @param\ p1\ The\ first\ Piece\ affected.\r\n\ @param\ r1\ The\ row\ of\ the\ first\ Piece\ affected.\r\n\ @param\ c1\ The\ column\ of\ the\ first\ Piece\ affected.\r\n\ @param\ b1\ The\ initial\ movement\ state\ of\ the\ first\ Piece.\r\n\ @param\ p2\ The\ second\ Piece\ affected.\r\n\ @param\ r2\ The\ row\ of\ the\ second\ Piece\ affected.\r\n\ @param\ c2\ The\ column\ of\ the\ second\ Piece\ affected.\r\n\ @param\ b2\ The\ initial\ movement\ state\ of\ the\ second\ Piece.\r\n
numComments=22
